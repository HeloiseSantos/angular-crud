1. npm start: roda API;

CRIAÇÃO DO PROJETO
2. npm install -g @angular/cli: instala CLI do Angular para iniciar projeto;
3. ng: help comandos do Angular;
4. ng new nomeDoProjeto: para criar o projeto;
5. ng new frontend --minimal: --minimal tira alguns arquivos desnecessários;
6. selecionar se terá routing: y
7. É nessário escolher se será css ou um pré-processador css;
8. Inicializar prjeto: entrar na pasta frontend e utilizar npm start - Ele irá compilar os arquivos e levantar um server local para desenvolvimento - http://localhost:4200/;

DICA
- Deixar sempre 3 abas do terminal abertas: 1 para rodar o server do frontend, 1 para rodar o backend e uma para utilizar para comandos (criação de componentes, etc).

CONHECENDO OS ARQUIVOS DO PROJETO
- Como indicamos a criação do projeto como --minimal, no arquivo angular.json é importante setar as propriedades "inlineTemplate" como false e "inlineStyle" como false para que o HTML e o CSS fiquem em arquivos separados. Caso não defina isso como false, todo HTML, CSS e TS ficarão em apenas um arquivo e isso não é uma boa prática.;

MÓDULOS
- main.ts: carrega o módulo que irá inicializar a aplicação (AppModule), que é o módulo principal;
- app.module.ts: bootstrap: [AppComponent] aponta para o componente que será carregado nossa aplicação;

PASTAS
- assets: pode colocar arquivos estáticos, imagens, arquivos de fontes...
- environments: onde podemos colocar variáveis de ambiente;
    environments.ts: variáveis de ambiente de desenvolvimento;
    environments.prod.ts: variáveis de ambiente de produção;
- app: pasta do primeiro componente;
- src: pasta onde iremos criar outros componentes;

-index.html: chama o componente principal da aplicação e partir deste componente, todos os outros serão carregados através desta única página, por isso chamamos de SINGLE PAGE APPLICATION;

AULA "HTML DO APPCOMPONENT
- {{ nomeDaVariavel }} - double mustache - chama a variável declarada no component.ts. Ele irá interpretar o valor do nome e substituir pelo que está dentro do componente. 
Chamamos também de interpolação de variável.
- templateUrl: 'app.component.html' - faz a referência do html externo;

AULA "INSTALAR OS COMPONENTES DO MATERIAL DESIGN"
- ng add @angular/material - instala componentes do Angular Material
    Será necessário selecionar o esquema de cores que você gostaria de criar o template;
    Aplicar tipografia na forma global? y
    Animações? y

AULA "COMPONENTE CABEÇALHO"
- ng g c caminhoOuNomeDoComponente - cria componente;
- usar o nome do selector no .ts do componente para chamar o componente em outras páginas; Ex.: <app-header></app-header> no arquivo app.component.html;
- Importar MatToolbarModule no app.module e usar <mat-toolbar> - serve para criar container para header, títulos ou ações;
- mat-elevation-z4 - é uma classe do material que eleva o elemento no eixo z para dar um efeito de elevação e sombra;
- <i class="material-icons"></i> para indicar que você irá inserir um ícone;

AULA "COMPONENTE NAVEGAÇÃO"
-propriedades da mat-sidenav (necessárias para que apareça na tela):
    - mode="side" 
    - opened - aberto
    - fixedInViewPort="true"
    - fixedTopGap="64" - dá um gap (espaço para baixo) para não ficar em cima de outra aplicação
    - mat-list-item no <a> - aplica estilo à navegação

AULA "ELEMENTOS DO ANGULAR #01"
- Componentes:
    - HTML home.component.html
    - CSS home.component.css
    - TS home.component.ts
    - <app-home></app-home>
- Diretivas: existem 2 tipos - Attribute Directives e Structural Directives
    - Atributo: Altera a aparência e o comportamento de um elemento, componente ou outra diretiva.
    - Estrutural: Altera o layout adicionando e removendo elementos da DOM.
    - *** Property Binding ***
    - *** Event Binding ***
    - *** One Way Data Binding ***
    - *** Two Way Data Binding ***
- Rotas: Angular router
    - Router Outlet
- Pipes: interpolação do que está dentro do double mustache {{ produto.vencimento | date }}

AULA "ELEMENTOS DO ANGULAR #02"
- Observables:
    - Programação Reativa - ReactiveX - import { Observable } from "rxjs";
    - Código Proativo !== Código Reativo:
        - Código Proativo: fica o tempo inteiro consumindo memória, pois sempre pergunta se existe algo para ser feito, portanto, sempre sendo executado.
        - Código Reativo: o código só é chamado de forma reativa, é necessário que algo ocorra (evento externo) para que ele seja chamado e executado.
    - Padrão Observer:
        - Padrão orientado a Evento.
        - Subject: monitorar e detectar quando o evento acontece.
        - Observer: códigos que estão interessados em um determinado evento.
    - callbacks: função com parâmetro para outra função.
    - Promisses: também usa callbacks, mas tem a capacidade de encadear várias chamadas. Pode ser usada apenas uma única vez.
    - Observables: reusável, stream de dados, operadores.

AULA "ELEMENTOS DO ANGULAR #03"
- Services: classes que têm como principal objetivo organizar e compartilhar métodos e dados entre componentes
    - ng g s services/product
    - Injeção de dependência: é um padrão no qual a classe recebe as dependências de uma fonte externa ao invés de criar por conta própria.
    - https://angular.io/guide/hierarchical-dependency-injection

AULA "COMPONENTE INÍCIO (HOME)
- estrtura do projeto:
    - dentro da pasta components: tudo que puder ser utilizado em mais de uma tela.
    - dentro da pasta view: sempre que tenho uma página inteira, que não será utilizada em outros lugares.

AULA "NAVEGANDO ENTRE COMPONENTES"
    - <router-outlet></router-outlet> chama sistema de rotas (ponto que será substituído entre as telas de navegação)
    - app-routing.module.ts: onde serão trabalhadas as rotas.
    - ctrl + espaço - code complete

AULA "DIRETIVAS NA PRÁTICA #01" E "DIRETIVAS NA PRÁTICA #02"
    - Diretiva de atributo: capaz de alterar comportamento e estilo de um componente.
        - para criar uma diretiva: ng g d directives/red
    - Diretiva estrtural:  
        - para criar, é da mesma forma: ng g d directives/for
        - implements OnInit: ciclo de vida de inicialização.

AULA "BINDINGS"
    - Binding de eventos: um evento, uma ação, chamará o método para ser executado. Exemplo: <button (click)="fazerAlgo()">Fazer algo</button>
    - Binding de atributo: o valor da variável dentro do id será atribuído o que está dentro do component.ts. Exemplo: <p [id]="propLegal">Olá, mundo!</p>

AULA "NAVEGAR PARA TELA DE CRIAR PRODUTOS"
    - mat-raised-button: no HTML aplica estilo ao button.
    - router: para fazer a navegação de um componente para outro.
    - no construtor - private router: Router - faz com que a rota seja injetada pelo Angular. Uma vez que o Angular percebeu que, dentro do construtor do componente, eu declarei que vou precisar de um router e o tipo de atributo que eu quero receber, ele será capaz de fornecer um router sem que eu precise me preocupar em instanciar um router, pois quem é responsável por criar os componentes e instanciar a classe é o Angular. - this.router.navigate(['/products/create']) - esta é a rota para onde eu quero que o componente navegue.
    - Ver conceitos de injeção de dependência.

AULA "PRODUTO MODELO"
    - Cria-se um model para ter produtos sempre com características padrões que precisam ser definidas.
    - *** ver sobre export interface ***

AULA "PRODUTO SERVICE"
    - Por que existe um service dentro do Angular?
        - Para que um componente acesse um backend, para ter requisições http, lógica, etc.
    - Para criar um service: ng g s components/product/product
    - No @Injectable({ providedIn: 'root' }) 
        - o @Injectable indica que essa classe pode ser injetada em outras classes.
        - O providedIn: 'root' significa que esse service é um singleton, ou seja, uma classe que tem uma única instância compartilhada.

AULA "MÉTODO CRIAR PRODUTO"
    - cliente http - precisamos fazer uma requisição http para nosso backend, que, neste projeto, roda a partir do json-server. Já temos uma API pronta para utilizar, que, neste caso é: http://localhost:3001. Usaremos isso para que possamos inserir novos projeto no backend.
    - Observables
    - Utilizaremos o rxjs de forma reativa, de modo que temos um Subject, que irá monitorar o evento, no caso o próprio Observable, e iremos registrar, fazer um Subscribe de uma função para ser notificado sempre que uma resposta http chegar. Ou seja, uma vez que um client http envia uma requisição, ele não irá devolver pra gente uma resposta, mas sim um Observable e esse Observable irá subescrever uma função para ser notificado quando uma resposta chegar.
    - Necessário importar o HttpClientModule para ter os serviços disponibilizados pelo Angular.
    - No service, precisamos injetar o HttpClient para que possamos usar ele em nossa funcionalidade.
    - Criar uma função - create() - que será a função responsável por inserir no backend um novo produto. Feito isso, temos a possibilidade de mandar uma requisição http para o backend
    - Requisição do tipo post() - Inserir um novo item no backend. Este post irá retornar um Observable do tipo product e neste caso o post precisa retornar um Observable desse tipo também.
    - No método createProduct() no component.ts é onde iremos disparar a chamada para o método que criamos no service.
    - No método subscribe() é notificado quando a resposta chegar. Passo uma função arrow e apenas quando chegar a resposta eu mostro que o produto foi adicionado com sucesso ou não. Posso também adicionar a parte de navegação.

AULA "FORMULÁRIO CRIAR PRODUTO"
    - matInput - diretiva que irá mexer no estilo e comportamento.
    - Precisamos estabelecer que o input de cada elemento altere a propriedade que corresponde: Two-way data bindin - [(ngModel)]="product.name" - diretiva não estrutural
    - É importante ter o atributo name="" dentro do input

AULA "COMPONENTE OBTER PRODUTO"
    - Observable<Product[]> - Irá retornar um array de produtos.
    - Requisição do tipo get() - ler as informações do backend.