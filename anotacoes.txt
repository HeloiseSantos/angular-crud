1. npm start: roda API;

CRIAÇÃO DO PROJETO
2. npm install -g @angular/cli: instala CLI do Angular para iniciar projeto;
3. ng: help comandos do Angular;
4. ng new nomeDoProjeto: para criar o projeto;
5. ng new frontend --minimal: --minimal tira alguns arquivos desnecessários;
6. selecionar se terá routing: y
7. É nessário escolher se será css ou um pré-processador css;
8. Inicializar prjeto: entrar na pasta frontend e utilizar npm start - Ele irá compilar os arquivos e levantar um server local para desenvolvimento - http://localhost:4200/;

DICA
- Deixar sempre 3 abas do terminal abertas: 1 para rodar o server do frontend, 1 para rodar o backend e uma para utilizar para comandos (criação de componentes, etc).

CONHECENDO OS ARQUIVOS DO PROJETO
- Como indicamos a criação do projeto como --minimal, no arquivo angular.json é importante setar as propriedades "inlineTemplate" como false e "inlineStyle" como false para que o HTML e o CSS fiquem em arquivos separados. Caso não defina isso como false, todo HTML, CSS e TS ficarão em apenas um arquivo e isso não é uma boa prática.;

MÓDULOS
- main.ts: carrega o módulo que irá inicializar a aplicação (AppModule), que é o módulo principal;
- app.module.ts: bootstrap: [AppComponent] aponta para o componente que será carregado nossa aplicação;

PASTAS
- assets: pode colocar arquivos estáticos, imagens, arquivos de fontes...
- environments: onde podemos colocar variáveis de ambiente;
    environments.ts: variáveis de ambiente de desenvolvimento;
    environments.prod.ts: variáveis de ambiente de produção;
- app: pasta do primeiro componente;
- src: pasta onde iremos criar outros componentes;

-index.html: chama o componente principal da aplicação e partir deste componente, todos os outros serão carregados através desta única página, por isso chamamos de SINGLE PAGE APPLICATION;

AULA "HTML DO APPCOMPONENT
- {{ nomeDaVariavel }} - double mustache - chama a variável declarada no component.ts. Ele irá interpretar o valor do nome e substituir pelo que está dentro do componente. 
Chamamos também de interpolação de variável.
- templateUrl: 'app.component.html' - faz a referência do html externo;

AULA "INSTALAR OS COMPONENTES DO MATERIAL DESIGN"
- ng add @angular/material - instala componentes do Angular Material
    Será necessário selecionar o esquema de cores que você gostaria de criar o template;
    Aplicar tipografia na forma global? y
    Animações? y

AULA "COMPONENTE CABEÇALHO"
- ng g c caminhoOuNomeDoComponente - cria componente;
- usar o nome do selector no .ts do componente para chamar o componente em outras páginas; Ex.: <app-header></app-header> no arquivo app.component.html;
- Importar MatToolbarModule no app.module e usar <mat-toolbar> - serve para criar container para header, títulos ou ações;
- mat-elevation-z4 - é uma classe do material que eleva o elemento no eixo z para dar um efeito de elevação e sombra;
- <i class="material-icons"></i> para indicar que você irá inserir um ícone;

AULA "COMPONENTE NAVEGAÇÃO"
-propriedades da mat-sidenav (necessárias para que apareça na tela):
    - mode="side" 
    - opened - aberto
    - fixedInViewPort="true"
    - fixedTopGap="64" - dá um gap (espaço para baixo) para não ficar em cima de outra aplicação
    - mat-list-item no <a> - aplica estilo à navegação

AULA "ELEMENTOS DO ANGULAR #01"
- Componentes:
    - HTML home.component.html
    - CSS home.component.css
    - TS home.component.ts
    - <app-home></app-home>
- Diretivas: existem 2 tipos - Attribute Directives e Structural Directives
    - Atributo: Altera a aparência e o comportamento de um elemento, componente ou outra diretiva.
    - Estrutural: Altera o layout adicionando e removendo elementos da DOM.
    - *** Property Binding ***
    - *** Event Binding ***
    - *** One Way Data Binding ***
    - *** Two Way Data Binding ***
- Rotas: Angular router
    - Router Outlet
- Pipes: interpolação do que está dentro do double mustache {{ produto.vencimento | date }}

AULA "ELEMENTOS DO ANGULAR #02"
- Observables:
    - Programação Reativa - ReactiveX - import { Observable } from "rxjs";
    - Código Proativo !== Código Reativo:
        - Código Proativo: fica o tempo inteiro consumindo memória, pois sempre pergunta se existe algo para ser feito, portanto, sempre sendo executado.
        - Código Reativo: o código só é chamado de forma reativa, é necessário que algo ocorra (evento externo) para que ele seja chamado e executado.
    - Padrão Observer:
        - Padrão orientado a Evento.
        - Subject: monitorar e detectar quando o evento acontece.
        - Observer: códigos que estão interessados em um determinado evento.
    - callbacks: função com parâmetro para outra função.
    - Promisses: também usa callbacks, mas tem a capacidade de encadear várias chamadas. Pode ser usada apenas uma única vez.
    - Observables: reusável, stream de dados, operadores.

AULA "ELEMENTOS DO ANGULAR #03"
- Services: classes que têm como principal objetivo organizar e compartilhar métodos e dados entre componentes
    - ng g s services/product
    - Injeção de dependência: é um padrão no qual a classe recebe as dependências de uma fonte externa ao invés de criar por conta própria.
    - https://angular.io/guide/hierarchical-dependency-injection

AULA "COMPONENTE INÍCIO (HOME)
- estrtura do projeto:
    - dentro da pasta components: tudo que puder ser utilizado em mais de uma tela.
    - dentro da pasta view: sempre que tenho uma página inteira, que não será utilizada em outros lugares.

AULA "NAVEGANDO ENTRE COMPONENTES"
    - <router-outlet></router-outlet> chama sistema de rotas (ponto que será substituído entre as telas de navegação)
    - app-routing.module.ts: onde serão trabalhadas as rotas.
    - ctrl + espaço - code complete

AULA "DIRETIVAS NA PRÁTICA #01" E "DIRETIVAS NA PRÁTICA #02"
    - Diretiva de atributo: capaz de alterar comportamento e estilo de um componente.
        - para criar uma diretiva: ng g d directives/red
    - Diretiva estrtural:  
        - para criar, é da mesma forma: ng g d directives/for
        - implements OnInit: ciclo de vida de inicialização.